// Generated by CoffeeScript 1.6.3
(function() {
  window.ImageLazyLoad = (function() {
    ImageLazyLoad.prototype.version = '1.0.0';

    ImageLazyLoad.prototype.options = {
      range: 200,
      elements: "img",
      container: "body",
      errorImage: "about:blank",
      mode: "vertical",
      realSrcAttribute: "data-src",
      fadeAtStart: true,
      afterImageLoaded: null,
      afterImageLoadError: null,
      defaultScrollTriggerDelay: 150
    };

    ImageLazyLoad.prototype.setOptions = function(options) {
      var prop, src;
      if (options == null) {
        return;
      }
      for (prop in options) {
        if (options.hasOwnProperty(prop)) {
          this.options[prop] = options[prop];
        }
      }
      if (typeof this.options.errorImage === 'string') {
        src = this.options.errorImage;
        this.options.errorImage = new Image();
        return this.options.errorImage.src = src;
      }
    };

    function ImageLazyLoad(options) {
      this.setOptions(options);
      this.$container = $(this.options.container);
      this.$elements = this.$container.find(this.options.elements);
      this.axis = this.options.mode === "vertical" ? "top" : "left";
      this.container = this.options.container === 'body' ? $(window) : this.$container;
      this.containerSize = this.axis === 'top' ? this.container.height() : this.container.width();
      this.refreshElements(this.containerSize);
      this.startListenOnScroll();
    }

    ImageLazyLoad.prototype.startListenOnScroll = function() {
      var _this = this;
      this.timer;
      return this.container.on('scroll.ImageLazyLoad', function(e) {
        clearTimeout(_this.timer);
        return _this.timer = setTimeout(function() {
          return _this.onScroll(e, _this);
        }, _this.options.defaultScrollTriggerDelay);
      });
    };

    ImageLazyLoad.prototype.refreshElements = function(viewPortSize) {
      var _this = this;
      return this.$elements = this.$elements.map(function(i, el) {
        var $el, elPos;
        $el = $(el);
        if (_this.options.fadeAtStart) {
          $el.css("opacity", 0);
        }
        elPos = $el.position()[_this.axis];
        if (elPos < viewPortSize + _this.options.range) {
          _this.loadImage($el);
          return null;
        } else {
          return el;
        }
      });
    };

    ImageLazyLoad.prototype.loadImage = function($el) {
      var img,
        _this = this;
      img = new Image();
      img.onload = function() {
        if (typeof _this.options.afterImageLoaded === 'function') {
          return _this.options.afterImageLoaded($el, img.src);
        } else {
          $el.attr('src', img.src);
          if (_this.options.fadeAtStart) {
            return $el.css("opacity", 1);
          }
        }
      };
      img.onerror = function() {
        if (typeof _this.options.afterImageLoadError === 'function') {
          return _this.options.afterImageLoadError($el, _this.options.errorImage.src);
        } else {
          $el.attr('src', _this.options.errorImage.src);
          if (_this.options.fadeAtStart) {
            return $el.css("opacity", 1);
          }
        }
      };
      return img.src = $el.attr(this.options.realSrcAttribute);
    };

    ImageLazyLoad.prototype.onScroll = function(e, that) {
      var pos;
      pos = that.axis === 'top' ? that.container.scrollTop() : that.container.scrollLeft();
      if (that.canLoading(pos)) {
        that.refreshElements(pos + that.containerSize);
      }
      if (that.$elements.length === 0) {
        return that.unbindEvents();
      }
    };

    ImageLazyLoad.prototype.canLoading = function(pos) {
      var end, start;
      start = pos - this.options.range;
      end = poz + this.containerSize + this.options.range;
      console.log([]);
      return true;
    };

    ImageLazyLoad.prototype.calculate = function() {};

    ImageLazyLoad.prototype.unbindEvents = function() {
      console.log('unbind');
      return this.container.off('.ImageLazyLoad');
    };

    return ImageLazyLoad;

  })();

}).call(this);

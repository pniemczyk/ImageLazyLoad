// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ImageLazyLoad = (function() {
    ImageLazyLoad.prototype.version = '1.0.1';

    ImageLazyLoad.prototype.lastTopPosition = 0;

    ImageLazyLoad.prototype.options = {
      range: null,
      elements: "img",
      errorImage: "about:blank",
      container: 'body',
      mode: "vertical",
      realSrcAttribute: "data-src",
      useFade: true,
      afterImageLoaded: null,
      afterImageLoadError: null,
      defaultScrollTriggerDelay: 150,
      loadingAtTopToEnd: true,
      autoUpdateOnWindowResize: false
    };

    ImageLazyLoad.prototype.setOptions = function(options) {
      var prop, src;
      if (options == null) {
        return;
      }
      for (prop in options) {
        if (options.hasOwnProperty(prop)) {
          this.options[prop] = options[prop];
        }
      }
      if (typeof this.options.errorImage === 'string') {
        src = this.options.errorImage;
        this.options.errorImage = new Image();
        this.options.errorImage.src = src;
        if (this.options.container === window) {
          return this.options.container = 'body';
        }
      }
    };

    function ImageLazyLoad(options) {
      this.loadAll = __bind(this.loadAll, this);
      var _this = this;
      this.setOptions(options);
      this.$container = $(this.options.container);
      this.$elements = this.$container.find(this.options.elements);
      if (this.options.useFade) {
        this.fadeAll();
      }
      this.axis = this.options.mode === "vertical" ? "top" : "left";
      this.viewPort = this.options.container === 'body' ? $(window) : this.$container;
      this.viewPortSize = this.axis === 'top' ? this.viewPort.height() : this.viewPort.width();
      if (this.options.range == null) {
        this.options.range = this.viewPortSize;
      }
      this.refreshLoader();
      this.startListenOnScroll();
      if (this.options.autoUpdateOnWindowResize) {
        $(window).resize(function() {
          return _this.refreshLoader();
        });
      }
    }

    ImageLazyLoad.prototype.fadeAll = function() {
      return this.$elements.each(function(i, el) {
        return $(el).css("opacity", 0);
      });
    };

    ImageLazyLoad.prototype.loadAll = function() {
      var _this = this;
      this.$elements.each(function(i, item) {
        return _this.loadImage($(item));
      });
      this.$elements = [];
      return this.unbindEvents();
    };

    ImageLazyLoad.prototype.startListenOnScroll = function() {
      var _this = this;
      this.timer;
      return this.viewPort.on('scroll.ImageLazyLoad', function(e) {
        clearTimeout(_this.timer);
        return _this.timer = setTimeout(function() {
          return _this.onScroll(e, _this);
        }, _this.options.defaultScrollTriggerDelay);
      });
    };

    ImageLazyLoad.prototype.refreshLoader = function() {
      return this.onScroll(null, this);
    };

    ImageLazyLoad.prototype.refreshElements = function(position) {
      var _this = this;
      return this.$elements = this.$elements.map(function(i, el) {
        var $el, elPos, loadImg;
        $el = $(el);
        elPos = $el.position()[_this.axis];
        loadImg = false;
        if (_this.options.loadingAtTopToEnd) {
          loadImg = elPos < position + _this.viewPortSize + _this.options.range;
        } else {
          loadImg = (position - _this.options.range < elPos && elPos < position + _this.viewPortSize + _this.options.range);
        }
        if (loadImg) {
          _this.loadImage($el);
          return null;
        } else {
          return el;
        }
      });
    };

    ImageLazyLoad.prototype.loadImage = function($el) {
      var img,
        _this = this;
      img = new Image();
      img.onload = function() {
        if (typeof _this.options.afterImageLoaded === 'function') {
          return _this.options.afterImageLoaded($el, img.src);
        } else {
          $el.attr('src', img.src);
          if (_this.options.useFade) {
            return $el.css("opacity", 1);
          }
        }
      };
      img.onerror = function() {
        if (typeof _this.options.afterImageLoadError === 'function') {
          return _this.options.afterImageLoadError($el, _this.options.errorImage.src);
        } else {
          $el.attr('src', _this.options.errorImage.src);
          if (_this.options.useFade) {
            return $el.css("opacity", 1);
          }
        }
      };
      return img.src = $el.attr(this.options.realSrcAttribute);
    };

    ImageLazyLoad.prototype.onScroll = function(e, that) {
      var pos;
      pos = that.axis === 'top' ? that.viewPort.scrollTop() : that.viewPort.scrollLeft();
      if (that.canLoading(pos)) {
        that.refreshElements(pos);
        if (that.$elements.length === 0) {
          return that.unbindEvents();
        }
      }
    };

    ImageLazyLoad.prototype.canLoading = function(pos) {
      if (!this.options.loadingAtTopToEnd) {
        return true;
      }
      if (pos > this.lastTopPosition) {
        this.lastTopPosition = pos;
        return true;
      } else {
        return false;
      }
    };

    ImageLazyLoad.prototype.unbindEvents = function() {
      return this.viewPort.off('.ImageLazyLoad');
    };

    ImageLazyLoad.prototype.bindEvents = function() {
      return this.startListenOnScroll();
    };

    return ImageLazyLoad;

  })();

}).call(this);

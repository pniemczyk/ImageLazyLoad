// Generated by CoffeeScript 1.6.1
(function() {

  (function($) {
    var axis, canLoading, defaultOptions, loadImage, onScroll, options, refreshElements, self, startListenOnScroll, viewPort, viewPortSize;
    defaultOptions = {
      range: null,
      elements: "img",
      errorImage: "about:blank",
      mode: "vertical",
      realSrcAttribute: "data-src",
      useFade: true,
      afterImageLoaded: null,
      afterImageLoadError: null,
      defaultScrollTriggerDelay: 150,
      loadingAtTopToEnd: true,
      autoUpdateOnWindowResize: false
    };
    self = this;
    viewPort = null;
    viewPortSize = null;
    options = null;
    axis = null;
    onScroll = function(e, that) {
      var pos;
      pos = that.axis === 'top' ? that.viewPort.scrollTop() : that.viewPort.scrollLeft();
      if (canLoading(pos)) {
        refreshElements(pos);
        if (that.options.$elements.length === 0) {
          return $.fn.imageLazyLoad.unbindEvents();
        }
      }
    };
    startListenOnScroll = function() {
      var timer,
        _this = this;
      timer = null;
      return self.viewPort.on('scroll.ImageLazyLoad', function(e) {
        clearTimeout(timer);
        return timer = setTimeout(function() {
          return onScroll(e, _this);
        }, self.options.defaultScrollTriggerDelay);
      });
    };
    refreshElements = function(position) {
      var _this = this;
      return self.options.$elements = self.options.$elements.map(function(i, el) {
        var $el, elPos, loadImg;
        $el = $(el);
        elPos = $el.position()[self.axis];
        loadImg = false;
        if (self.options.loadingAtTopToEnd) {
          loadImg = elPos < position + viewPortSize + self.options.range;
        } else {
          loadImg = (position - self.options.range < elPos && elPos < position + viewPortSize + self.options.range);
        }
        if (loadImg) {
          loadImage($el);
          return null;
        } else {
          return el;
        }
      });
    };
    loadImage = function($el) {
      var img,
        _this = this;
      img = new Image();
      img.onload = function() {
        if (typeof _this.options.afterImageLoaded === 'function') {
          return _this.options.afterImageLoaded($el, img.src);
        } else {
          $el.attr('src', img.src);
          if (_this.options.useFade) {
            return $el.css("opacity", 1);
          }
        }
      };
      img.onerror = function() {
        if (typeof _this.options.afterImageLoadError === 'function') {
          return _this.options.afterImageLoadError($el, _this.options.errorImage.src);
        } else {
          $el.attr('src', _this.options.errorImage.src);
          if (_this.options.useFade) {
            return $el.css("opacity", 1);
          }
        }
      };
      return img.src = $el.attr(this.options.realSrcAttribute);
    };
    canLoading = function(pos) {
      if (!this.loadingAtTopToEnd) {
        return true;
      }
      if (pos > this.lastTopPosition) {
        this.lastTopPosition = pos;
        return true;
      } else {
        return false;
      }
    };
    $.fn.imageLazyLoad = function(options) {
      var lastTopPosition,
        _this = this;
      lastTopPosition = 0;
      self.options = $.extend(defaultOptions, options);
      self.options.$container = this === window ? $('body') : this;
      self.options.$elements = self.options.$container.find(self.options.elements);
      if (self.options.useFade) {
        self.options.$elements.each(function(i, el) {
          return $(el).css("opacity", 0);
        });
      }
      self.axis = self.options.mode === "vertical" ? "top" : "left";
      self.viewPort = self.options.container === 'body' ? $(window) : self.options.$container;
      self.viewPortSize = self.axis === 'top' ? self.viewPort.height() : self.viewPort.width();
      if (self.options.range == null) {
        self.options.range = self.viewPortSize;
      }
      $.fn.imageLazyLoad.refreshLoader();
      startListenOnScroll();
      if (self.options.autoUpdateOnWindowResize) {
        return $(window).resize(function() {
          return $.fn.imageLazyLoad.refreshLoader();
        });
      }
    };
    $.fn.imageLazyLoad.version = '1.0.1';
    $.fn.imageLazyLoad.refreshLoader = function() {
      return onScroll(null, self);
    };
    return $.fn.imageLazyLoad.unbindEvents = function() {
      return self.viewPort.off('.ImageLazyLoad');
    };
  })(jQuery);

}).call(this);

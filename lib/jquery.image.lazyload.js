// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var fadeAll, getAxis, getPosition, getViewPort, getViewPortSize, isPositionToLoadImages;
    getViewPort = function(el) {
      if (el === 'body' || (el = $('body'))) {
        return $(window);
      } else {
        return $(el);
      }
    };
    getAxis = function(mode) {
      if (mode === "vertical") {
        return "top";
      } else {
        return "left";
      }
    };
    fadeAll = function(elements) {
      return elements.each(function(i, el) {
        return $(el).css("opacity", 0);
      });
    };
    getViewPortSize = function(axis, viewPort) {
      if (axis === 'top') {
        return viewPort.height();
      } else {
        return viewPort.width();
      }
    };
    getPosition = function(axis, viewPort) {
      if (axis === 'top') {
        return viewPort.scrollTop();
      } else {
        return viewPort.scrollLeft();
      }
    };
    isPositionToLoadImages = function(loadingAtTopToEnd, elementPosition, currentPosition, viewPortSize, range) {
      if (loadingAtTopToEnd) {
        return elementPosition < currentPosition + viewPortSize + range;
      } else {
        return (currentPosition - range < elementPosition && elementPosition < currentPosition + viewPortSize + range);
      }
    };
    $.imageLazyLoad = function(el, options) {
      var loadImage, onScroll, refreshElements, startListenOnScroll,
        _this = this;
      this.version = '1.0.2';
      this.options = {};
      this.lastTopPosition = 0;
      this.$container = null;
      this.$elements = [];
      this.viewPort = null;
      this.viewPortSize = null;
      this.axis = null;
      this.$elements = function() {
        return this.options.$elements;
      };
      this.init = function(el, options) {
        var _this = this;
        this.options = $.extend({}, $.imageLazyLoad.defaultOptions, options);
        this.$container = el === window ? $('body') : $(el);
        this.$elements = this.$container.find(this.options.elements);
        this.axis = getAxis(this.options.mode);
        this.viewPort = getViewPort(this.$container);
        this.viewPortSize = getViewPortSize(this.axis, this.viewPort);
        if (this.options.range == null) {
          this.options.range = this.viewPortSize;
        }
        if (this.options.useFade) {
          fadeAll(this.$elements);
        }
        this.refreshLoader();
        startListenOnScroll();
        if (this.options.autoUpdateOnWindowResize) {
          return $(window).resize(function() {
            return _this.refreshLoader();
          });
        }
      };
      startListenOnScroll = function() {
        var timer;
        timer = null;
        return _this.viewPort.on('scroll.ImageLazyLoad', function(e) {
          clearTimeout(timer);
          return timer = setTimeout(function() {
            return onScroll(e, _this);
          }, _this.options.defaultScrollTriggerDelay);
        });
      };
      this.unbindEvents = function() {
        return this.viewPort.off('.ImageLazyLoad');
      };
      this.bindEvents = function() {
        return startListenOnScroll();
      };
      this.loadAll = function() {
        var _this = this;
        this.$elements.each(function(i, item) {
          return loadImage($(item));
        });
        this.$elements = [];
        return this.unbindEvents();
      };
      refreshElements = function(position, that) {
        return that.$elements = that.$elements.map(function(i, item) {
          var $item, elPos;
          $item = $(item);
          elPos = $item.position()[that.axis];
          if (isPositionToLoadImages(_this.options.loadingAtTopToEnd, elPos, position, _this.viewPortSize, _this.options.range)) {
            return loadImage($item);
          } else {
            return item;
          }
        });
      };
      loadImage = function($el) {
        var img;
        img = new Image();
        img.onload = function() {
          if (typeof _this.options.afterImageLoaded === 'function') {
            return _this.options.afterImageLoaded($el, img.src);
          } else {
            $el.attr('src', img.src);
            if (_this.options.useFade) {
              return $el.css("opacity", 1);
            }
          }
        };
        img.onerror = function() {
          if (typeof _this.options.afterImageLoadError === 'function') {
            return _this.options.afterImageLoadError($el, _this.options.errorImage.src);
          } else {
            $el.attr('src', _this.options.errorImage.src);
            if (_this.options.useFade) {
              return $el.css("opacity", 1);
            }
          }
        };
        img.src = $el.attr(_this.options.realSrcAttribute);
        return null;
      };
      onScroll = function(e, that) {
        var pos;
        pos = getPosition(that.axis, that.viewPort);
        if (!that.options.loadingAtTopToEnd || pos >= that.lastTopPosition) {
          that.lastTopPosition = pos;
          refreshElements(pos, that);
          if (that.$elements.length === 0) {
            return that.unbindEvents();
          }
        }
      };
      this.refreshLoader = function() {
        return onScroll(null, _this);
      };
      return this.init(el, options);
    };
    $.fn.imageLazyLoad = function(options) {
      return new $.imageLazyLoad(this, options);
    };
    return $.imageLazyLoad.defaultOptions = {
      range: null,
      elements: "img",
      errorImage: "about:blank",
      mode: "vertical",
      realSrcAttribute: "data-src",
      useFade: true,
      afterImageLoaded: null,
      afterImageLoadError: null,
      defaultScrollTriggerDelay: 150,
      loadingAtTopToEnd: true,
      autoUpdateOnWindowResize: false
    };
  })(jQuery);

}).call(this);

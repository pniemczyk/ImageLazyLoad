// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  var log;

  log = function(msg) {
    return console.log(msg);
  };

  describe("Self test", function() {
    return it("is ok", function() {
      return expect(true).toBe(true);
    });
  });

  describe("ImageLazyLoad", function() {
    it('is defined', function() {
      return expect(ImageLazyLoad).toBeDefined();
    });
    describe("instance has base property", function() {
      beforeEach(function() {
        this.viePort = $(window);
        return this.subject = new ImageLazyLoad();
      });
      it('version equal "1.0.1"', function() {
        return expect(this.subject.version).toEqual('1.0.1');
      });
      return describe("options as default", function() {
        it('with range be viewPort size', function() {
          return expect(this.subject.options.range).toEqual(this.viePort.height());
        });
        it('with elements equal "img"', function() {
          return expect(this.subject.options.elements).toEqual("img");
        });
        it('with container equal "body"', function() {
          return expect(this.subject.options.container).toEqual("body");
        });
        it('with errorImage equal "about:blank"', function() {
          return expect(this.subject.options.errorImage).toEqual("about:blank");
        });
        it('with mode equal "vertical"', function() {
          return expect(this.subject.options.mode).toEqual("vertical");
        });
        it('with realSrcAttribute equal "data-src"', function() {
          return expect(this.subject.options.realSrcAttribute).toEqual("data-src");
        });
        it('with useFade equal true', function() {
          return expect(this.subject.options.useFade).toEqual(true);
        });
        it('with afterImageLoaded be null', function() {
          return expect(this.subject.options.afterImageLoaded).toBeNull();
        });
        it('with afterImageLoadError be null', function() {
          return expect(this.subject.options.afterImageLoadError).toBeNull();
        });
        it('with defaultScrollTriggerDelay be 150', function() {
          return expect(this.subject.options.defaultScrollTriggerDelay).toEqual(150);
        });
        it('with loadingAtTopToEnd be true', function() {
          return expect(this.subject.options.loadingAtTopToEnd).toBe(true);
        });
        return it('with autoUpdateOnWindowResize be false', function() {
          return expect(this.subject.options.autoUpdateOnWindowResize).toBe(false);
        });
      });
    });
    return describe("class has method", function() {});
  });

}).call(this);
